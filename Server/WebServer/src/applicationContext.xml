<?xml version="1.0" encoding="UTF-8"?>
  
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context" 
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-4.0.xsd">
  <bean id="placeholderConfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations">  
      <list>  
        <value>classpath:jdbc-c3p0.properties</value>  
      </list>  
    </property>  
  </bean>  
 
  <!-- data source -->  
  <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
    <property name="driverClass">
      <value>${jdbc.driverClassName}</value>
    </property>
    <property name="jdbcUrl">
      <value>${jdbc.url}</value>
    </property>
    <property name="user">
      <value>${jdbc.username}</value>
    </property>
    <property name="password">
      <value>${jdbc.password}</value>
    </property>
 
    <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->   
    <property name="acquireIncrement">  
      <value>${c3p0.acquireIncrement}</value>  
    </property>  
    <!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->   
    <property name="initialPoolSize">  
      <value>${c3p0.initialPoolSize}</value>  
    </property>  
    <property name="minPoolSize">  
      <value>${c3p0.minPoolSize}</value>  
    </property>  
    <property name="maxPoolSize">  
      <value>${c3p0.maxPoolSize}</value>  
    </property>  
    <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->   
    <property name="maxIdleTime">  
      <value>${c3p0.maxIdleTime}</value>  
    </property>  
    <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->   
    <property name="idleConnectionTestPeriod">  
      <value>${c3p0.idleConnectionTestPeriod}</value>  
    </property>  
    <!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements   
      -  属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。   
      -  如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0
      -->
    <property name="maxStatements">
      <value>${c3p0.maxStatements}</value>
    </property>
    <!-- c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能 通过  
      -  多线程实现多个操作同时被执行。Default: 3
      -->
    <property name="numHelperThreads">
      <value>${c3p0.numHelperThreads}</value>
    </property>
  </bean>
  

 	<!-- 建立Mybatis SessionFactory -->
 	<!-- 自动扫描mapper -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
 		<!-- 其他配置文件的键值读取-->
        <property name="configLocation"  value="classpath:mybatis-config.xml" />
        
        <property name="mapperLocations" value="classpath:com/iresponse/mapper/**/*.xml" />
    </bean>
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.iresponse.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>
    
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">  
        <constructor-arg ref="sqlSessionFactory"></constructor-arg>  
    </bean>
    
    <bean name="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">     
        <property name="dataSource" ref="dataSource"></property>  
    </bean>  
    <tx:annotation-driven transaction-manager="txManager"/>
</beans>